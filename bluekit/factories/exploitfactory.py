import yaml
import logging
from os import listdir
from os.path import isfile, join

from bluekit.constants import EXPLOIT_DIRECTORY
from bluekit.models.exploit import Exploit


class ExploitFactory:
    def __init__(self, exploit_dir: str = EXPLOIT_DIRECTORY):
        self.exploit_dir = exploit_dir
        self.exploits = None

    def get_all_exploits(self, force_reload=False):
        if self.exploits is None or force_reload:
            onlyfiles = [
                join(self.exploit_dir, f)
                for f in listdir(self.exploit_dir)
                if isfile(join(self.exploit_dir, f))
            ]

            exploits = []
            for filename in onlyfiles:
                exploits.append(self.read_exploit(filename))
            self.exploits = exploits
        return self.exploits

    def read_exploit(self, filename):
        f = open(filename, "r")
        details = yaml.safe_load(f)
        f.close()
        return Exploit(details)

    @staticmethod
    def construct_exploit(details):
        return Exploit(details)
